generator client {
  provider = "prisma-client-js"
  previewFeatures = []
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum UserStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
}

model Workspace {
  id            String          @id @default(uuid())
  name          String
  imageUrl      String
  inviteCode    String         @unique
  members       WorkspaceMember[]
  channels      Channel[]
  messages      Message[]      @relation("WorkspaceToMessage")
  directMessages DirectMessage[] @relation("WorkspaceToDirectMessage")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model WorkspaceMember {
  id            String   @id @default(uuid())
  userId        String
  workspaceId   String
  userName      String   @default("User")
  userImage     String   @default("")
  role          String   @default("MEMBER")
  status        String   @default("OFFLINE")
  lastActiveStatus String   @default("ONLINE")
  hasCustomName Boolean  @default(false)
  hasCustomImage Boolean @default(false)
  isFirstLogin  Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([userId])
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean   @default(false)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Message[] @relation("ChannelToMessage")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Message {
  id          String    @id @default(cuid())
  content     String
  fileUrl     String?
  fileName    String?
  fileType    String?
  userId      String
  userName    String
  userImage   String?
  channelId   String
  channel     Channel   @relation("ChannelToMessage", fields: [channelId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation("WorkspaceToMessage", fields: [workspaceId], references: [id], onDelete: Cascade)
  thread      Thread?   @relation("MessageThread")
  parentThread Thread?  @relation("ThreadReplies", fields: [threadId], references: [id])
  threadId    String?
  isThreadReply Boolean @default(false)
  parentMessageId String?
  replyCount  Int      @default(0)
  reactions   Reaction[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isEdited    Boolean  @default(false)
  isVectorized Boolean @default(false)

  @@index([channelId])
  @@index([workspaceId])
  @@index([threadId])
  @@index([parentMessageId])
}

model DirectMessage {
  id            String    @id @default(cuid())
  content       String
  fileUrl       String?
  fileName      String?
  fileType      String?
  workspaceId   String
  workspace     Workspace @relation("WorkspaceToDirectMessage", fields: [workspaceId], references: [id], onDelete: Cascade)
  senderId      String
  senderName    String
  senderImage   String?
  receiverId    String
  receiverName  String
  receiverImage String?
  reactions     Reaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([workspaceId])
  @@index([senderId])
  @@index([receiverId])
}

model Thread {
  id              String    @id @default(cuid())
  message         Message?  @relation("MessageThread", fields: [messageId], references: [id], onDelete: Cascade)
  messageId       String?   @unique
  replies         Message[]  @relation("ThreadReplies")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([messageId])
}

model Reaction {
  id              String    @id @default(cuid())
  emoji           String
  userId          String
  userName        String
  userImage       String?
  message         Message?  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId       String?
  directMessage   DirectMessage? @relation(fields: [directMessageId], references: [id], onDelete: Cascade)
  directMessageId String?
  createdAt      DateTime  @default(now())

  @@unique([userId, messageId, emoji])
  @@unique([userId, directMessageId, emoji])
  @@index([messageId])
  @@index([directMessageId])
}

model Conversation {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user1Id, user2Id])
}

model User {
  id        String     @id @default(cuid())
  userId    String     @unique  // Clerk user ID
  status    UserStatus @default(ONLINE)
  statusUpdatedAt DateTime @default(now())
}

model FileUpload {
  id        String   @id @default(cuid())
  fileName  String
  fileType  String
  data      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 