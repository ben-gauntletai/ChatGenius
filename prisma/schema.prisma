generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  imageUrl    String?
  createdAt   DateTime  @default(now())
  channels    Channel[]
  members     WorkspaceMember[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  userName    String
  userImage   String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        String    @default("MEMBER")
  joinedAt    DateTime  @default(now())

  @@unique([userId, workspaceId])
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean   @default(false)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())
}

model Message {
  id        String     @id @default(cuid())
  content   String
  createdAt DateTime   @default(now())
  userId    String
  userName  String
  userImage String
  channelId String
  channel   Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  reactions Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  userId    String
  userName  String
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model DirectMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  
  senderId    String
  senderName  String
  senderImage String
  
  receiverId    String
  receiverName  String
  receiverImage String

  reactions DirectMessageReaction[]
}

model DirectMessageReaction {
  id        String        @id @default(cuid())
  emoji     String
  userId    String
  userName  String
  messageId String
  message   DirectMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

model Conversation {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user1Id, user2Id])
} 