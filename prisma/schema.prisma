generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id            String          @id @default(uuid())
  name          String
  imageUrl      String
  inviteCode    String         @unique
  members       WorkspaceMember[]
  channels      Channel[]
  messages      Message[]
  directMessages DirectMessage[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  userName    String
  userImage   String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        String    @default("MEMBER")
  status      String    @default("online")
  joinedAt    DateTime  @default(now())

  @@unique([userId, workspaceId])
  @@index([workspaceId])
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean   @default(false)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Message {
  id          String      @id @default(uuid())
  content     String
  fileUrl     String?
  fileName    String?
  fileType    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  userName    String
  userImage   String
  channelId   String
  workspaceId String
  channel     Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  reactions   Reaction[]
}

model Reaction {
  id              String         @id @default(cuid())
  emoji           String
  userId          String
  userName        String
  messageId       String?
  directMessageId String?
  message         Message?       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  directMessage   DirectMessage? @relation(fields: [directMessageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([directMessageId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Conversation {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user1Id, user2Id])
}

model DirectMessage {
  id            String      @id @default(uuid())
  content       String
  fileUrl       String?
  fileName      String?
  fileType      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  senderId      String
  senderName    String
  senderImage   String
  receiverId    String
  receiverName  String
  receiverImage String
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  reactions     Reaction[]

  @@index([workspaceId])
  @@index([senderId])
  @@index([receiverId])
} 